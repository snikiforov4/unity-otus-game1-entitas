//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public OriginalRotationComponent originalRotation { get { return (OriginalRotationComponent)GetComponent(GameComponentsLookup.OriginalRotation); } }
    public bool hasOriginalRotation { get { return HasComponent(GameComponentsLookup.OriginalRotation); } }

    public void AddOriginalRotation(UnityEngine.Quaternion newValue) {
        var index = GameComponentsLookup.OriginalRotation;
        var component = (OriginalRotationComponent)CreateComponent(index, typeof(OriginalRotationComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceOriginalRotation(UnityEngine.Quaternion newValue) {
        var index = GameComponentsLookup.OriginalRotation;
        var component = (OriginalRotationComponent)CreateComponent(index, typeof(OriginalRotationComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveOriginalRotation() {
        RemoveComponent(GameComponentsLookup.OriginalRotation);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherOriginalRotation;

    public static Entitas.IMatcher<GameEntity> OriginalRotation {
        get {
            if (_matcherOriginalRotation == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.OriginalRotation);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherOriginalRotation = matcher;
            }

            return _matcherOriginalRotation;
        }
    }
}
